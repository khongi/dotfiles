#!/bin/bash
#
# Khongor Bayarsaikhan - 2020

printf "=== Starting bootstrap ===\n\n"

ORIGINAL_WORKING_DIR=$(pwd)
cd $HOME

SYSTEM_TYPE=$(uname -s)

OH_MY_ZSH_ROOT="$HOME/.oh-my-zsh"
ZSH_CUSTOM="$HOME/.config/zsh/custom"
OH_MY_ZSH_PLUGINS="$ZSH_CUSTOM/plugins"
OH_MY_ZSH_THEMES="$ZSH_CUSTOM/themes"

VIM_BUNDLE="$HOME/.vim/bundle"

YADM_SSH_URL="git@github.com:khongi/dotfiles.git"

confirm() {
    # call with a prompt string or use a default
    read -r -p "${1:-Are you sure? [y/N]} " response
    case "$response" in
    [yY][eE][sS] | [yY])
        true
        ;;
    *)
        false
        ;;
    esac
}

if [ "$SYSTEM_TYPE" = "Linux" ]; then
    echo "-> Checking system dependencies..."

    isDebian=$(grep -Ei 'debian|buntu|mint' /etc/*release)

    isArch=false
    if test -f "/etc/arch-release"; then
        isArch=true
    fi

    # Install yay
    if ! command -v yay >/dev/null 2>&1; then
        if [ "$isArch" ]; then
            echo "  -> Installing yay for AUR..."
            sudo pacman -S yay
        fi
    else
        echo "  -> yay already installed..."
    fi

    # Install zsh
    if ! command -v zsh >/dev/null 2>&1; then
        confirm "  -> Install zsh? [y/n]" && {
            echo "  -> Installing zsh..."
            if [ "$isDebian" ]; then
                sudo apt install zsh
            elif [ "$isArch" ]; then
                sudo pacman -S zsh
            fi
            mkdir -p $HOME/.cache/zsh
            touch $HOME/.cache/zsh/history
        }
    else
        echo "  -> zsh already installed..."
    fi

    # Install vim
    if ! command -v vim >/dev/null 2>&1; then
        confirm "  -> Install vim? [y/n]" && {
            echo "  -> Installing vim..."
            if [ "$isDebian" ]; then
                sudo apt install vim-gtk3
            elif [ "$isArch" ]; then
                sudo pacman -S gvim
            fi
        }
    else
        echo "  -> vim already installed..."
    fi

    # Install go
    if ! command -v go >/dev/null 2>&1; then
        confirm "  -> Install go? [y/n]" && {
            echo "  -> Installing go..."
            if [ "$isDebian" ]; then
                sudo apt install golang-go
            elif [ "$isArch" ]; then
                sudo pacman -S go
            fi
        }
    else
        echo "  -> go already installed..."
    fi

    # Install lf
    if ! command -v lf >/dev/null 2>&1; then
        confirm "  -> Install lf? [y/n]" && {
            echo "  -> Installing lf..."
            go get -u github.com/gokcehan/lf
        }
    else
        echo "  -> lf already installed..."
    fi

    # Install gnupg
    if ! command -v gpg >/dev/null 2>&1; then
        confirm "  -> Install gnupg? [y/n]" && {
            echo "  -> Installing gnupg for gpg..."
            if [ "$isDebian" ]; then
                sudo apt install gnupg
            elif [ "$isArch" ]; then
                sudo pacman -S gnupg
            fi
        }
    else
        echo "  -> gnupg already installed..."
    fi

    # Install pip
    if ! command -v pip3 >/dev/null 2>&1; then
        confirm "  -> Install pip? [y/n]" && {
            echo "  -> Installing pip..."
            if [ "$isDebian" ]; then
                sudo apt install python3-pip
            elif [ "$isArch" ]; then
                sudo pacman -S python
            fi
        }
    else
        echo "  -> python3-pip already installed..."
    fi

    # Install autojump
    if ! command -v autojump >/dev/null 2>&1; then
        confirm "  -> Install autojump? [y/n]" && {
            echo "  -> Installing autojump..."
            if [ "$isDebian" ]; then
                sudo apt install autojump
            elif [ "$isArch" ]; then
                yay -S autojump
            fi
        }
    else
        echo "  -> autojump already installed..."
    fi

    # Install trash-cli
    if ! command -v trash-put >/dev/null 2>&1; then
        confirm "  -> Install trash-cli? [y/n]" && {
            echo "  -> Installing trash-cli..."
            if [ "$isDebian" ]; then
                sudo apt install trash-cli
            elif [ "$isArch" ]; then
                yay -S trash-cli
            fi
        }
    else
        echo "  -> trash-cli already installed..."
    fi

    echo "-> Checking zsh dependencies..."

    # Oh-My-Zsh + Plugins + Themes

    confirm "  -> Install oh-my-zsh? [y/n]" && {
        # Create directory structure
        if [ ! -d "$ZSH_CUSTOM" ]; then
            echo "  -> Creating zsh directory structure..."
            mkdir -p $OH_MY_ZSH_PLUGINS
            mkdir -p $OH_MY_ZSH_THEMES
        else
            echo "  -> Oh-My-Zsh directory structure already created..."
        fi

        # Install zsh-nvm
        if [ ! -d "$OH_MY_ZSH_PLUGINS/zsh-nvm" ]; then
            confirm "  -> Install zsh-nvm? [y/n]" && {
                echo "  -> Installing zsh-nvm..."
                git clone https://github.com/lukechilds/zsh-nvm $OH_MY_ZSH_PLUGINS/zsh-nvm
            }
        else
            echo "  -> zsh-nvm already installed"
        fi

        # Install zsh-autosuggestions
        if [ ! -d "$OH_MY_ZSH_PLUGINS/zsh-autosuggestions" ]; then
            echo "  -> Installing zsh-autosuggestions..."
            git clone https://github.com/zsh-users/zsh-autosuggestions $OH_MY_ZSH_PLUGINS/zsh-autosuggestions
        else
            echo "  -> zsh-autosuggestions already installed"
        fi

        # Install zsh-syntax-highlighting
        if [ ! -d "$OH_MY_ZSH_PLUGINS/zsh-syntax-highlighting" ]; then
            echo "  -> Installing zsh-syntax-highlighting..."
            git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $OH_MY_ZSH_PLUGINS/zsh-syntax-highlighting
        else
            echo "  -> zsh-syntax-highlighting already installed"
        fi

        # Install powerlevel9k
        if [ ! -d "$OH_MY_ZSH_THEMES/powerlevel9k" ]; then
            confirm "  -> Install powerlevel9k? [y/n]" && {
                echo "  -> Installing powerlevel9k..."
                git clone https://github.com/bhilburn/powerlevel9k.git $OH_MY_ZSH_THEMES/powerlevel9k
            }
        else
            echo "  -> powerlevel9k already installed"
        fi

        # Install Oh-My-Zsh with unattended mode
        if [ ! -f "$OH_MY_ZSH_ROOT/oh-my-zsh.sh" ]; then
            echo "  -> Installing Oh My Zsh..."
            sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
        else
            echo "  -> Oh My Zsh already installed"
        fi
    }
fi

echo "-> Checking vim dependencies..."
if [ ! -d "$VIM_BUNDLE" ]; then
    confirm "  -> Install pathogen? [y/n]" && {
        # Installing pathogen
        echo "  -> Installing pathogen..."
        mkdir -p $HOME/.vim/autoload $VIM_BUNDLE
        curl -LSso ~/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim
    }
else
    echo "  -> Pathogen already installed"
fi

if [ ! -d "$VIM_BUNDLE/nerdcommenter" ]; then
    confirm "  -> Install NERD Commenter? [y/n]" && {
        # Installing NERD Commenter
        echo "  -> Installing NERD Commenter..."
        git clone https://github.com/scrooloose/nerdcommenter.git $VIM_BUNDLE/nerdcommenter
    }
else
    echo "  -> NERD Commenter already installed"
fi

if [ -f "$HOME/.config/yadm/files.gpg" ]; then
    confirm "-> Decrypt files? [y/n]" && {
        printf "\n  -> Decrypting files...\n"
        yadm decrypt
    }
fi

if [ ! "$(yadm remote get-url origin)" = "$YADM_SSH_URL" ]; then
    confirm "-> Change yadm URL to SSH? [y/n]" && {
        printf "\n  -> Updating the yadm repo origin URL\n"
        yadm remote set-url origin "$YADM_SSH_URL"
    }
fi

cd $ORIGINAL_WORKING_DIR

printf "\n=== Finished bootstrap ===\n"
